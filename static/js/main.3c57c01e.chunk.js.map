{"version":3,"sources":["components/cityNameTitle/cityNameTitle.js","components/currentCondition/currentCondition.js","components/temperature/temperature.js","components/TempRange/TempRange.js","containers/weatherCard.js","App.js","utils/network.js","config/endpoints.js","index.js"],"names":["cityNameTitle_cityNameTitle","props","react_default","a","createElement","className","children","currentCondition_currentCondition","temperature_temperature","TempRange_TempRange","minTemp","maxTemp","WeatherCard","state","backgroundIsActive","this","setState","classNames","getCardClassNames","onClick","onCardClick","bind","style","backgroundImage","concat","cityImage","temperature","currentCondition","city","React","Component","App","forecast","_this2","axios","get","then","response","console","log","data","Math","round","currentcondition","photo","mintemp","maxtemp","url","getForecastByCity","list","changeDisplayCity","event","target","value","containers_weatherCard","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"uWAWeA,SAAA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACXJ,EAAMK,YCHEC,SAAA,SAACN,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZJ,EAAMK,YCLEE,SAAA,SAACP,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZJ,EAAMK,YCTEG,SAAA,SAACR,GACf,OACCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACdH,EAAAC,EAAAC,cAACI,EAAD,KAAcP,EAAMS,SACpBR,EAAAC,EAAAC,cAACI,EAAD,KAAcP,EAAMU,YC6DPC,oNA/CbC,MAAQ,CACNC,oBAAoB,gFAIpBC,KAAKC,SAAS,CACZF,oBAAqBC,KAAKF,MAAMC,iEAKlC,IAAIG,EAAa,QAIjB,OAHIF,KAAKF,MAAMC,qBACbG,GAAc,YAETA,iCAGFhB,GACL,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWU,KAAKG,oBAAqBC,QAASJ,KAAKK,YAAYC,KAAKN,OACvEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBiB,MAAO,CAACC,gBAAA,OAAAC,OAA0BT,KAAKd,MAAMwB,UAArC,OACxCvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACI,EAAD,KACGO,KAAKd,MAAMyB,aAEdxB,EAAAC,EAAAC,cAACG,EAAD,KACGQ,KAAKd,MAAM0B,kBAErBzB,EAAAC,EAAAC,cAACK,EAAD,CAAWC,QAASK,KAAKd,MAAMS,QAASC,QAASI,KAAKd,MAAMU,WAEvDT,EAAAC,EAAAC,cAACJ,EAAD,KACGe,KAAKd,MAAM2B,eAjCEC,IAAMC,4BC4EjBC,oNA1DblB,MAAQ,CACNe,KAAM,GACNF,YAAa,GACbC,iBAAkB,GAClBK,SAAU,qFAGMJ,GAAM,IAAAK,EAAAlB,KC9BjBmB,IAAMC,IAAI,qGD+BQC,KAAK,SAACC,GAC3BC,QAAQC,IAAIF,GACZJ,EAAKjB,SAAS,CACZY,KAAMS,EAASG,KAAK,GAAGZ,KACvBF,YAAae,KAAKC,MAAML,EAASG,KAAK,GAAGd,aACzCC,iBAAkBU,EAASG,KAAK,GAAGG,iBACnClB,UAAWY,EAASG,KAAK,GAAGI,MAC7BlC,QAAS2B,EAASG,KAAK,GAAGK,QAC1BlC,QAAS0B,EAASG,KAAK,GAAGM,YCpCA,SAAClB,GAChC,IAAMmB,ECJyB,yEDICnB,EAChC,OAAOM,IAAMC,IAAIY,GDsCfC,CAAkBpB,GAAMQ,KAAK,SAACC,GAC5BJ,EAAKjB,SAAS,CACZgB,SAAUK,EAASG,KAAKS,qDAM5BlC,KAAKmC,kBA/BY,2DAkCIC,GACrBpC,KAAKmC,kBAAkBC,EAAMC,OAAOC,wCAIpC,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAMbH,EAAAC,EAAAC,cAACkD,EAAD,CACE1B,KAAMb,KAAKF,MAAMe,KACjBF,YAAaX,KAAKF,MAAMa,YACxBC,iBAAkBZ,KAAKF,MAAMc,iBAC7BF,UAAWV,KAAKF,MAAMY,UAC3Bf,QAASK,KAAKF,MAAMH,QACpBC,QAASI,KAAKF,MAAMF,kBAlDPmB,cG5BlByB,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.3c57c01e.chunk.js","sourcesContent":["/*\nThis is a 'functional component' where its sole purpose is to render a string (city name) that is\nprovided by the parent component. In this case, the weatherCardTop container.\n\nIt will also associate the rendering with the stylesheet imported below.\n*/\n\nimport React from 'react';\n\nimport './cityNameTitle.scss';\n\nexport default (props) => {\n  return (\n    <h2 className='cityNameTitle'>\n      {props.children}\n    </h2>\n  );\n};\n","/*\nThis is a 'functional component' where its sole purpose is to render a string (current weather\ncondition) that is provided by the parent component. In this case, the weatherCardTop container.\n\nIt will also associate the rendering with the stylesheet imported below.\n*/\n\nimport React from 'react';\n\nimport './currentCondition.scss';\n\nexport default (props) => {\n  return (\n    <div className='currentCondition'>\n      {props.children}\n    </div>\n  );\n};\n","/*\nThis is a 'functional component' that renders a temperature value with a degree (Â°) symbol. This\nsymbol is injected by css which is imported below.\n*/\n\nimport React from 'react';\n\nimport './temperature.scss';\n\nexport default (props) => {\n  return (\n    <div className='cardTemperature'>\n      {props.children}\n    </div>\n  );\n};\n","import React from 'react';\nimport Temperature from '../temperature/temperature';\nimport './TempRange.scss';\nexport default (props) =>{\n\treturn(\n\t\t<li className='TempRange'>\n\t\t<Temperature>{props.minTemp}</Temperature>\n\t\t<Temperature>{props.maxTemp}</Temperature>\n\t\t</li>\n\t);\n};\n","/*\nThis is a standard React component responbile for holding the top & bottom portion of the weather\ncard. It also relays the click event on the card top, to toggle the active/inactive state which\nin return show or hide the forecast (bottom) weather card.\n\nArguably this component may not be needed if we distribute its parts to the parent and children\ncomponents. This approach can be viewed as optional, but I usually prefer better separations\nto achieve better code organizations.\n*/\n\nimport React from 'react';\n\nimport CardTitle from '../components/cityNameTitle/cityNameTitle';\nimport CardDescription from '../components/currentCondition/currentCondition';\nimport CardTemperature from '../components/temperature/temperature';\nimport TempRange from '../components/TempRange/TempRange';\n//import generateForecasts from './helpers/generateForecast';\n\nimport './weatherCard.scss';\n\nclass WeatherCard extends React.Component {\n  state = {\n    backgroundIsActive: false\n  };\n\n  onCardClick() {\n    this.setState({\n      backgroundIsActive: !this.state.backgroundIsActive\n    })\n  }\n\n  getCardClassNames() {\n    let classNames = 'card ';\n    if (this.state.backgroundIsActive) {\n      classNames += 'isActive';\n    }\n    return classNames;\n  }\n\n  render(props) {\n    return (\n      <div className={this.getCardClassNames()} onClick={this.onCardClick.bind(this)}>\n        <div className='cardUpperPortion' style={{\"backgroundImage\": `url(${this.props.cityImage})`}}>\n          <div className='cardInfo'>\n            <CardTemperature>\n              {this.props.temperature}\n            </CardTemperature>\n            <CardDescription>\n              {this.props.currentCondition}\n            </CardDescription>\n\t    <TempRange minTemp={this.props.minTemp} maxTemp={this.props.maxTemp}/>\n          </div>\n          <CardTitle>\n            {this.props.city}\n          </CardTitle>\n        </div>\n        {/*<div className='cardBottomPortion'>\n          <div className='cardDetail'>\n            {/*<ul className='forecastsWrapper'>\n              {generateForecasts(this.props.forecast)}\n            </ul>\n          </div>\n        </div>*/}\n      </div>\n    )\n  }\n};\n\nexport default WeatherCard;\n","/*\nThis is the root level component that brings in and renders the entire React application. It contains\nan internal state, high level styling, and the declartion of the application's' hierarchy.\n\nchangeDisplayCity:\n  When this function is triggered, it will perform 2 network calls to retrieve data. For each\n  set of returning data, we will set update this component's state with the new information which\n  in turn will trigger a re-render of the UI.\n\ncomponentDidMount:\n  This is one of many React component's lifecycle method. After the render cycle of a component, we\n  want to fetch the weather information for the DEFAULT_CITY and display it after the page is fully\n  initialized.\n\nonCitySelectionChanged:\n  This function is being passed down to <CitySelection> as a prop. Upon the change of the dropdown\n  selection, the component will trigger this function which in turn allow us to relay the trigger\n  to `changeDisplayCity`. Obtaining the user selected value out of the dropdown is critical, so we\n  will retrieve it by calling `event.target.value` which referenced to the event caller, in this\n  case the dropdown menu.\n\nrender:\n  This method in a React component is responsible for the rendering. Here we can describe what is\n  being rendered, and how information is being used.\n*/\n\nimport React, { Component } from 'react';\n\nimport WeatherCard from './containers/weatherCard';\n//import CitySelection from './components/citySelection/citySelection';\n\nimport { getWeatherByCity, getForecastByCity } from './utils/network';\n\nimport './App.scss';\n\nconst DEFAULT_CITY = 'edmonton';\n\nclass App extends Component {\n  state = {\n    city: '',\n    temperature: '',\n    currentCondition: '',\n    forecast: [],\n  };\n\n  changeDisplayCity(city) {\n    getWeatherByCity(city).then((response) => {\n      console.log(response)\n      this.setState({\n        city: response.data[4].city,\n        temperature: Math.round(response.data[4].temperature),\n        currentCondition: response.data[4].currentcondition,\n        cityImage: response.data[4].photo,\n\t      minTemp: response.data[4].mintemp,\n\t      maxTemp: response.data[4].maxtemp\n      })\n    });\n\n    getForecastByCity(city).then((response) => {\n      this.setState({\n        forecast: response.data.list\n      })\n    });\n  }\n\n  componentDidMount() {\n    this.changeDisplayCity(DEFAULT_CITY);\n  }\n\n  onCitySelectionChanged(event) {\n    this.changeDisplayCity(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      {/*\n        <CitySelection\n          selectionChangeHandler={this.onCitySelectionChanged.bind(this)}>\n        </CitySelection>\n        */}\n        <WeatherCard\n          city={this.state.city}\n          temperature={this.state.temperature}\n          currentCondition={this.state.currentCondition}\n          cityImage={this.state.cityImage}\n\t    minTemp={this.state.minTemp}\n\t    maxTemp={this.state.maxTemp}\n          //forecast={this.state.forecast}\n        >\n        </WeatherCard>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/*\nThis helper file is responsible for fetching weather & forecast data from a given city name.\n\nWe will be using axios network helper to perform these api calls. https://github.com/axios/axios\n\nAt the end of each function call, we will return resulting Promise object created by axios back to\nthe consumer. It will be up to the consumer (caller) to handle success/failure of these network calls.\n*/\n\nimport axios from 'axios';\n\nimport { CITY_WEATHER_URL, CITY_FORECAST_URL } from '../config/endpoints';\n\nexport const getWeatherByCity = (city) => {\n  const url = CITY_WEATHER_URL;\n  return axios.get('https://cors-anywhere.herokuapp.com/'+url)\n};\n\nexport const getForecastByCity = (city) => {\n  const url = CITY_FORECAST_URL + city;\n  return axios.get(url);\n};\n","/*\nURLs for retrieving weather information. Notice these links are incomplete as it ends with \"?city=\"\n\nWe will be appending the city name to the end of the string prior to our network calls, so the backend\nknows which city we are inquiring.\n\nThe information is cached from https://openweathermap.org, due to API limitation we will use static\ncopies of the weather data for now.\n\nThis static endpoint is defaulted to \"edmonton\", with 4 other possible query inputs:\n\"vancouver\", \"montreal\", \"calgary\", and \"toronto\".\n*/\n\nexport const CITY_WEATHER_URL = 'http://204.209.76.154:5000/weather?city=Coruscant&format=json';\n\nexport const CITY_FORECAST_URL = 'https://9q8kp49olb.execute-api.us-east-1.amazonaws.com/forecast/?city=';\n","/*\nThis is the top level entry point responsible for attaching our entire React app to the DOM.\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}